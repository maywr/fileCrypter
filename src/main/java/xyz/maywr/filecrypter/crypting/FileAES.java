package xyz.maywr.filecrypter.crypting;

import xyz.maywr.filecrypter.util.FileUtils;

import java.io.File;
import java.nio.ByteBuffer;
import java.util.Arrays;

/**
 * @author maywr
 * 20.06.2022 16:48
 */
public class FileAES
{
	private static final byte[] ENCRYPT_HEADER = {
			0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x68, 0x61, 0x73,
			0x20, 0x62, 0x65, 0x65, 0x6E, 0x20, 0x65, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74,
			0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x46, 0x69, 0x6C, 0x65,
			0x43, 0x72, 0x79, 0x70, 0x74, 0x20, 0x2D, 0x20, 0x31, 0x2E, 0x30, 0xA, 0x59,
			0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x65, 0x65,
			0x20, 0x77, 0x68, 0x61, 0x74, 0x73, 0x20, 0x69, 0x6E, 0x73, 0x69, 0x64, 0x65,
			0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
			0x64, 0x20, 0x66, 0x69, 0x6C, 0x65, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA,
			0xA, 0xA, 0xA, 0xA, 0xA };

	public static boolean isEncrypted( File f )
	{
		return Arrays.equals( FileUtils.readNBytes( f, ENCRYPT_HEADER.length ), ENCRYPT_HEADER );
	}

	public static byte[] encrypt( File f, String key )
	{
		byte[] cryptData = AES256.encrypt( FileUtils.fileToByteArray( f ), key );
		if ( cryptData == null )
			return null;
		return ByteBuffer.allocate( ENCRYPT_HEADER.length + cryptData.length ).put( ENCRYPT_HEADER ).put( cryptData )
		                 .array();
	}

	public static byte[] decrypt( File f, String key )
	{
		if ( !isEncrypted( f ) )
			throw new UnsupportedOperationException( "the file is not encrypted" );
		byte[] data = FileUtils.fileToByteArray( f );
		if ( data == null )
			return null;
		return AES256.decrypt( Arrays.copyOfRange( data, ENCRYPT_HEADER.length, data.length ), key );

	}
}
